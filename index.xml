<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>_Echo_</title>
    <link>http://echoblog.cc/</link>
    <description>Recent content on _Echo_</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 03 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://echoblog.cc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「Golang」for range 使用方法及避坑指南</title>
      <link>http://echoblog.cc/posts/golangfor-range-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://echoblog.cc/posts/golangfor-range-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</guid>
      <description>[TOC]
前言 循坏控制结构是一种在各种编程语言中常用的程序控制结构，其与顺序控制结构、选择控制结构组成了程序的控制结构，程序控制结构是指以某种顺序执行的一系列动作，用于解决某个问题。理论和实践证明，无论多复杂的算法均可通过顺序、选择、循环3种基本控制结构构造出来。
在Go中，提供了两种循环控制结构for和goto，但是后者不推荐使用（原因请查看艾兹格·迪杰斯特拉（Edsger Wybe Dijkstra）在1968年的一篇名称为《GOTO语句有害论》的论文），但是就作者而言goto在某些业务情况下，是很好用的，所以也不需要完全就反对他。
 本文代码基于Go 1.16版本，不同版本如有差异请见谅
 万能的for循环 在Go中，与c语言（及大部分语言）不同的是，去掉了while,do..while 循环，将其完全简化为for，虽然这样看起来是缺少了很多功能，但是while,do..while 等功能完全可以通过for来实现 。
接下来，通过几个代码来展示出，for循环，如何实现while,do..while 的相关逻辑。
func main() { N := 10 for i := 0; i &amp;lt; N; i++ { // TODO 	} for { /* * while true{ *	// TODO *	} * */ } for N &amp;gt; 10 { /* * while N&amp;gt;10 { *	// TODO *	} * */ } for { // TODO 	// do{ 	// TODO 	// }while(N&amp;gt;10)  if N &amp;lt;= 10 { break } } } 代码有些粗糙，望大家见谅，可以看得出来，一个for就可以完成while,do.</description>
    </item>
    
    <item>
      <title>「Golang」 Map源码解析</title>
      <link>http://echoblog.cc/posts/golangmap%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://echoblog.cc/posts/golangmap%E8%A7%A3%E6%9E%90/</guid>
      <description>[TOC]
Map Map通常称哈希表（Hash Table）、散列表等，是根据键（Key）而直接访问在内存储存位置的数据结构。也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做桶。哈希表是计算机科学中的最重要数据结构之一，这不仅因为它 𝑂(1) 的读写性能非常优秀，还因为它提供了键值之间的映射。想要实现一个性能优异的哈希表，需要注意两个关键点 —— 哈希函数和冲突解决方法。哈希表的实现主要需要解决两个问题，哈希函数和冲突解决。
在很多编程语言中都有哈希表的相关库的提供，比如C++，Java等，均在语言内部标准库中实现了哈希表相关数据结构的使用方式，而在Go语言中，哈希表则是一个内嵌类型。
哈希表设计及哈希碰撞解决方式 哈希函数 在哈希表实现过程中，哈希函数是一个很重要的部分，哈希函数选择的好坏很大程度的影响哈希表整体性能的好坏，实际上，哈希表是一个表结构，其在读写时，可以通过使用哈希函数对传入的Key进行哈希计算得出其哈希值，能够将不同Key映射到不同的索引上，一般来说，存储表结构的数据结构通常使用数组来做存储某些Key的哈希值对应的Value，通常存储这些Value的数组的每个位置，我们通常称其为桶。
较为理想的哈希函数实现的哈希表，对其任意元素的查找速度始终为𝑂(1) 。因为其每个Key所映射到的桶都是唯一的，即每个Key都有不同的桶的位置，但是这种情况非常难以实现因为，这要求哈希函数的输出范围大于输入范围，但是由于键的数量会远远大于映射的范围，所以在实际使用时，这个理想的效果是不可能实现的。
那么当两个不同的Key经过哈希函数计算后所得到的桶的位置是相同的时候，就产生了哈希碰撞，要注意的是，两个不同的Key产生哈希碰撞不代表两个Key的哈希值完全相同，有可能只是部分相同，比如高X位或者低X位。
哈希碰撞 当产生哈希碰撞时，该如何解决呢？目前比较常见的就是开放地址法和链表法，接下来我们简要的了解一下这两种哈希冲突的解决办法。
开放地址法 开放地址法的基本思想是：当发生哈希碰撞时，按照某种方法继续探测哈希表中的其他存储单元，直到找到空位置为止。这个过程可用以下过程描述：
 首先注明，哈希函数计算哈希索引的公式假若为： $$ index=HashFunction(Key) % Len(Bucket) $$ 其中HashFunction(Key)为求出当前Key的哈希值，然后对当前桶的总数求余
  发现发生哈希碰撞，此时计算出的index=1（只是举例） 此时发现index=1处有Value存储，则探测index+1处也就是index=2处 如果index=2处仍然有Value存储则继续往后探测，直到找到某个桶中不存在Value（写）或者找到目标元素（读）时或到桶的长度时结束  有上述过程可以看出，当哈希表越来越满时聚集越来越严重，这导致产生非常长的探测长度，后续的数据插入将会非常费时。
 开放地址法对性能影响最大的是装载因子，它是数组中元素的数量与数组大小的比值。随着装载因子的增加，线性探测的平均用时就会逐渐增加，这会影响哈希表的读写性能。当装载率超过 70% 之后，哈希表的性能就会急剧下降，而一旦装载率达到 100%，整个哈希表就会完全失效，这时查找和插入任意元素的时间复杂度都是 𝑂(𝑛)的，这时需要遍历数组中的全部元素，所以在实现哈希表时一定要关注装载因子的变化。
 链表法 链表法的基本思想是：当发生哈希碰撞时，将该Key与其hash值相同的Key链接在同一个单链表中，因为一般来说这个链表的长度并不会太长（比如Go中这个链表长度取8），所以查询仍然可以按照𝑂(1)时间计算，链表法有一个很重要的变量，即装载因子 这个装载因子的大小会影响链表的性能，因此，当装载因子达到一定程度的时候就需要进行哈希表的扩容，装载因子的求出公式为： $$ 装载因子=哈希表总元素数量 ➗ 哈希表桶的数量 $$
Go中的Map 概述 Map是一种方便而强大的内置数据结构，它将一种类型的Key（键）与另一种类型的Value（元素或值）关联起来。Key可以是任何可以进行比较的类型，如整数、浮点和复数、字符串、指针、interface{}（但是前提是interface中的数据类型也必须是可以比较的）、结构和数组。和切片一样，Map 也持有对底层数据结构的引用。如果你把一个Map传给一个函数，该函数改变了Map的内容，那么这些改变将在调用者中可见。
数据结构 Map在Go中是按照一种内置数据结构的形式出现，在使用的时候只需要像使用切片那样即可：
func main() { a := make(map[string]string,10) a[&amp;#34;test&amp;#34;]=&amp;#34;test&amp;#34; } 同时跟切片一样Map在Go语言底层也是一种结构体的实现，现在来看一下Map在Go中最底层的结构体样式以及相关字段功能：
type hmap struct { // 当前map中元素数量 即len(map)返回的值。 	count int // 当前map所处状态标记，比如正在写入正在迭代等。 	flags uint8 // 桶的数量的值，最终map创建的桶的数量为 2^B  // 另外在使用Key的哈希值选桶的时候  // 取的是该哈希值的低B位作为选桶的值 	B uint8 // 当前溢出桶的数量 	noverflow uint16 // hash种子，在创建该结构体的时候动态生成 	hash0 uint32 // 指向第一个桶的指针 是一个连续的地址 因为是个数组  // 这里面存的是 *bmap 	buckets unsafe.</description>
    </item>
    
    <item>
      <title>「Golang」 通道源码解析</title>
      <link>http://echoblog.cc/posts/golangchannel%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://echoblog.cc/posts/golangchannel%E8%A7%A3%E6%9E%90/</guid>
      <description>[TOC]
通道描述 通道（Channel/Chan）是在golang并发编程中用的最多的一个数据结构（也可以说是基础类型），在go中，作者在并发编程的环境下对于数据之间的共享提出了一个建议，也是go的经典开发准则：
 Do not communicate by sharing memory; instead, share memory by communicating. 不要通过共享内存来通信，而应该通过通信来共享内存
 在通信方面，通道给我们提供了一个很好的在并发编程环境中进行多Goroutine之间的数据共享。那么本篇文章就来解析一下通道在go中的源代码是如何实现的。
通道相关结构体解析 本篇文章所有的源代码数据均采用go1.15.5版本，如果和您的源代码不相同，建议更换1.15.5版本。
接下来我将根据通道的结构与其相关常量来进行解析，通道的源代码文件在 runtime/chan.go 路径下。
 (前方高能，代码巨长，请各位准备好瓜子饮料矿泉水耐心观看)
 type hchan struct { qcount uint // 队列中有多少数据，即len时获得的值 	dataqsiz uint // chan 是一个循环队列，这个字段代表这个循环队列的总大小，即cap时获取的值 	buf unsafe.Pointer // 指向数组的指针，这个循环队列时靠数组实现的 	elemsize uint16 // 每个元素的size，做为偏移使用 	closed uint32 // 这个chan 是否关闭的标记 	elemtype *_type // 构建chan时候的元素类型  // 这个索引是用于做地址偏移的而不是像数组一样的下标 	sendx uint // 发送索引 即当前发送到哪了 	recvx uint // 接收索引 	recvq waitq // 被阻塞的接收g的列表 	sendq waitq // 被阻塞的发送g的列表  // 一个锁 防止修改结构体中内容以及 waitq中的内容 	lock mutex } type waitq struct { first *sudog // 队列头 sudog是一个存有等待g相关信息的结构体 	last *sudog // 队列尾 sudog是一个存有等待g相关信息的结构体 } 构建通道操作 func makechan64(t *chantype, size int64) *hchan { // 应该是判断当前系统是不是64位系统，因为int的长度会随着系统长度改变而改变 	// 32位系统中 int 相当于int32 64位中 int相当于int64 	if int64(int(size)) !</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://echoblog.cc/about/about/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://echoblog.cc/about/about/</guid>
      <description>大家好，我是一个Gopher，一个就职于某游戏公司的后台服务器的Gopher，日常使用语言也很幸运的是Golang，我是第一次写博客，可能会不太好，希望大家海涵，我的愿望是我的博客可以帮助到大家并且记录我的学习和工作踩坑的过程。如果有错误的地方希望大佬指正。</description>
    </item>
    
    <item>
      <title>「Golang」 sync.Mutex源码讲解</title>
      <link>http://echoblog.cc/posts/golang-sync.mutex%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://echoblog.cc/posts/golang-sync.mutex%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</guid>
      <description>sync.Mutex概述  后期更新：下面的代码中会多次出现 if race.Enabled { //todo } 这种代码，经过理解这种判断是进行判断当前程序是否开启了race竞态检测模式 ，即在运行go程序时是否采用 go run race xxx.go 这种进行进行竞态检测运行模式
 在进行源码解析之前，先看一下sync.Mutex是做什么的，首先看一下sync/mutex.go中的标注
 A Mutex is a mutual exclusion lock.The zero value for a Mutex is an unlocked mutex. A Mutex must not be copied after first use. 译注：Mutex是互斥锁，Mutex的零值是解锁的Mutex。Mutex在第一次使用后不得复制。
 从sync.Mutex的注释中可以看出，Mutex是一个互斥锁，根据百度百科给到的互斥锁的意义：
 在编程中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。每个对象都对应于一个可称为&amp;quot; 互斥锁&amp;quot; 的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象。
 也就是说，当某个struct中存在一个Mutex字段时，在某些方法进行调用时，如果Mutex已经被其他go程占用，那么本次调用会进行阻塞直至该Mutex被解锁。
sync.Mutex解析 接下来看一下sync.Mutex结构体的字段内容：
type Mutex struct { state int32 //当前锁的状态，该int32字段通过位移操作使之可以包含不同意义 	sema uint32 //是一个信号变量用于负责go程的唤醒和阻塞休眠 } const ( mutexLocked = 1 &amp;lt;&amp;lt; iota // 锁是否被持有 即是否已经锁住 	mutexWoken // 是否有被唤醒的go程 	mutexStarving //是否处于饥饿状态，此标记可以确保某些go程不会长久获取不到锁 	mutexWaiterShift = iota // 目前等待锁的go程数量 	starvationThresholdNs = 1e6 //进入饥饿状态的阈值时间 1ms ) Lock() 关于饥饿状态这个问题等之后在进行讲解，首先先说一下对Mutex加锁的过程</description>
    </item>
    
    <item>
      <title>「Golang」 sync.Mutex源码讲解</title>
      <link>http://echoblog.cc/posts/golang%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84map%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%E5%8F%8A%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://echoblog.cc/posts/golang%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84map%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%E5%8F%8A%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</guid>
      <description>非线程安全的map map是一个在开发过程中常用的内建类型，也是各位很熟悉的一个数据结构，他可以很方便的让我们做一些关于针对某些key-value结构的CRUD操作，但是在官方设计中，内建类型的map并不是一个可以在并发场景下进行并发读写的线程安全类型，此时我们就需要考虑对其进行一些线程安全的改造，首先我们要了解一下为什么```map``是一个非线程安全的类型，首先看下列代码：
func main() { m := make(map[string]int, 2) m[&amp;#34;dd&amp;#34;] = 22 go func() { for { m[&amp;#34;ff&amp;#34;] = 1 } }() go func() { for { _ = m[&amp;#34;dd&amp;#34;] } }() time.Sleep(1 * time.Hour) } // out: // fatal error: concurrent map read and map write 上面的代码在运行期抛出了：fatal error: concurrent map read and map write异常，代表在读写过程中出现了同时读写的问题，那么为什么会出现这个问题呢？在map底层源代码的针对读和写的函数中有下列两段代码：
// runtime.mapassign 即在map进行写入操作时调用的函数 func mapassign(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer { // ..............  // 在写入时会对h.</description>
    </item>
    
    <item>
      <title>「Golang」Slice源码讲解</title>
      <link>http://echoblog.cc/posts/golangslice%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://echoblog.cc/posts/golangslice%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</guid>
      <description>前言  ​ 在golang中有很多的数据结构是很常用的数据结构，比如array，slice，map等，其中最为常用的就是array和slice还有map了，理论上来讲array和slice在数据结构上是一种结构，都是顺序结构，但是由于array的固定长度特性，在有些时候对于需要动态的长度的使用情况很不友好，此时就需要利用slice进行对固定长度数组的代替
 什么是Slice  官方解释如下：
​	Slices wrap arrays to give a more general, powerful, and convenient interface to sequences of data. Except for items with explicit dimension such as transformation matrices, most array programming in Go is done with slices rather than simple arrays.
大概意思如下：
​	Slice是一个经过包装的array，其可为数据序列提供更通用，更强大和更方便的接口。 除了具有明确维数的项（例如转换矩阵）外，Go中的大多数数组编程都是使用切片而不是简单数组完成的。
 ​	切片个人认为有点像c++标准库中的vector，只不过是底层的实现方式可能有些许不同（不太了解c++，如果有大佬知道vector的底层实现的话，可以解惑一下），slice是一个把go数组进行了包装的一个结构体，但是这个结构体只是在编译等其他层面能看到，在我们使用过程中只需要像定义数组那样定义就可以在编译期间被转换为slice结构体。接下来我来解析一下slice的相关结构体源代码以及操作源代码。
代码解析  本篇文章所有代码基于Go1.15+版本编写
 slice的结构体 // slice 结构体，这个结构体会在编译期间构建 // 如果想在运行期间使用的话可以使用其对应的reflect结构体 // 即reflect.SliceHeader type slice struct { // 一个指向底层数组的指针 	array unsafe.</description>
    </item>
    
    <item>
      <title>「Golang」sync.Once用法以及源码讲解</title>
      <link>http://echoblog.cc/posts/golangsync.once%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://echoblog.cc/posts/golangsync.once%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</guid>
      <description>前言  在我们开发过程中经常会使用到单例模式这一经典的设计模式，单例模式可以帮助开发者针对某个（些）变量或者对象或者函数（方法）进行在程序运行期间只有一次的初始化或者函数调用操作，比如在开发项目中针对某一类连接池的初始化（如数据库连接池等）。针对这种情况，我们就需要使用单例模式进行操作。
 单例模式🌰 自己搞得单例模式 要实现一个单例模式，我们会很快就想到了在一个结构体中放置一个flag字段用于标记当前的函数是否被执行过，举个🌰：
type SingletonPattern struct { done bool } func (receiver *SingletonPattern) Do(f func()) { if !receiver.done { f() receiver.done=true } } 看似很美好，但是此时，如果传入的需要调用的函数f()会执行很长时间，比如数据库查询或者做一些连接什么的，当别的goroutine运行到此处的时候由于还没有执行完f()，就会发现done标记仍然是false，那么仍然会调用一次f()，此时就违背了单例模式的初衷。
那么如何解决上面的并发的问题呢。此时就可以使用go标准库中所提供的并发原语&amp;mdash;sync.Once
标准库真香系列之sync.Once 话不多说先上sync.Once 结构体的源代码：
type Once struct { // 标记符号，用于标记是否执行过 	done uint32 // 互斥锁，用于保护并发调用以及防止copy 	m Mutex } 结构体就这么简单，字段done用于标记是否执行过函数，至于为什么使用uint32类型，作者的理解是为了之后使用atomic操作做的妥协，m字段值用于保护并发情况下的情形，并且由于继承了Locker接口可以通过vet校验到其是否被复制
接下来看一下用于执行函数调用的Do()函数的实现：
func (o *Once) Do(f func()) { // 原子获取当前 done 字段是否等于0 	// 如果当前字段等于1 	// 则代表已经 执行过 	// 这是第一层校验 	if atomic.</description>
    </item>
    
    <item>
      <title>「Golang」sync.Pool的源码解</title>
      <link>http://echoblog.cc/posts/golangsync.pool%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://echoblog.cc/posts/golangsync.pool%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
      <description>前言 在平时我们的业务逻辑中，会出现多次，重复的申请在堆上创建的对象用作他用，当并发量不大的时候，可能往往并不会产生一些什么问题，当时一旦当并发量增长的时候就会发现因为重复在堆上创建对象导致了GC的扫描时间与STW（stop-the-world）很长，导致程序性能的降低，因为大量地创建在堆上的对象，也会影响垃圾回收标记的时间，因此来说频繁的在堆上申请对象说对高并发量的程序性能会产生很大的影响。
此时我们可以采用对象池的方式，去针对某些频繁的且大量重复申请的对象预先的创建或者将用完的对象放回对象池中，以便下回使用的时候免去了重新申请内存的问题，这样就有利于减少业务的耗时，还能提高程序的整体性能。 对象池是一种设计模式也是一种性能优化的方式，对象池（对象池模式）的概念如下：
 对象池（英语：object pool pattern）是一种设计模式。一个对象池包含一组已经初始化过且可以使用的对象，而可以在有需求时创建和销毁对象。池的用户可以从池子中取得对象，对其进行操作处理，并在不需要时归还给池子而非直接销毁它。这是一种特殊的工厂对象。 若初始化、实例化的代价高，且有需求需要经常实例化，但每次实例化的数量较少的情况下，使用对象池可以获得显著的效能提升。从池子中取得对象的时间是可预测的，但新建一个实例所需的时间是不确定。
 因此我们可以通过建立一个对象池的方式去优化频繁在堆上创建的对象，Go中官方标准库中就提供了一个线程安全的对象池&amp;mdash;sync.Pool
sync.Pool 首先针对sync.Pool官方给了一个合理的简述：
 // A Pool is a set of temporary objects that may be individually saved and retrieved. sync.Pool是一组临时对象，可以单独保存和检索。 // Any item stored in the Pool may be removed automatically at any time without notification. If the Pool holds the only reference when this happens, the item might be deallocated. 存储在sync.Pool中的任何项目可随时自动删除，无需通知。如果发生这种情况时sync.Pool持有唯一的引用，则该项目可能会被释放。 // A Pool is safe for use by multiple goroutines simultaneously.</description>
    </item>
    
    <item>
      <title>「Golang」sync.RWMutex源码讲解</title>
      <link>http://echoblog.cc/posts/golangsync.rwmutex%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://echoblog.cc/posts/golangsync.rwmutex%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</guid>
      <description>什么是sync.RWMutex 上次写过了sync.Mutex的源代码解析，这回写一下他的扩展版本，sync.RWMutex（下称读写锁）的源代码解析，首先看一下读写锁的作用，如下述：
 sync/rwmutex.go中 // A RWMutex is a reader/writer mutual exclusion lock. // The lock can be held by an arbitrary number of readers or a single writer.
 白话来讲，读写锁就是一个可以并发读但是不可以并发写的锁（此处有疑：不知应该称互斥锁还是称为锁），由于互斥锁的特性，会导致将所有goroutine（下称协程）串行化，从而影响整体程序运行的性能，如果写的数量大于读的数量时，性能损耗暂且可以忽略不计（建议不要忽略），但是当读的数量大于写的数量时，互斥锁对性能的影响是很大的，所以此刻我们需要采用读写锁来进行读操作和写操作的分开。
读写锁可以同时有多个协程进行对某个数据对某个数据进行读取，但是同一时间内只能有一个协程对其进行修改，这样就可以大大提高并发中读操作过多情况下互斥锁只能在同一时间内有一个协程访问这一痛点。
读写锁与互斥锁一样，禁止被复制，因为一旦对读写锁或互斥锁进行复制，连带复制的包括锁本身的状态，也就是说当对一个互斥锁或者读写锁复制时，当锁当前状态已经处于Lock状态时，被复制出来得到的锁也将会处于Lock状态，所以 锁禁止复制
字段解析 接下来看一下读写锁的源代码实现，首先看一下读写锁的结构体字段以及相关的常量字段的用处
 本文所有源代码版本基于1.15
 type RWMutex struct { w Mutex // 一个互斥锁的字段，用户进行写时加互斥锁 	writerSem uint32 // 一个writer的信号量，类似互斥锁中的信号量 	readerSem uint32 // 一个reader的信号量，类似互斥锁中的信号量 	readerCount int32 // 两种作用，1:标记有多少拿到读锁的reader，2:是否有writer需要竞争 	readerWait int32 // writer需要等待读锁解锁的reader的数量 } const rwmutexMaxReaders = 1 &amp;lt;&amp;lt; 30 // 最大reader的上限。即最多有多少的reader同时能拿到读锁  在标准库中有很多的字段或者变量都是使用位移操作进行一个字段作为多个含义去使用，比如我的【Golang】【标准库】sync.</description>
    </item>
    
  </channel>
</rss>
