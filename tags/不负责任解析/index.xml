<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>不负责任解析 on _Echo_</title>
    <link>https://echo.github.io/tags/%E4%B8%8D%E8%B4%9F%E8%B4%A3%E4%BB%BB%E8%A7%A3%E6%9E%90/</link>
    <description>Recent content in 不负责任解析 on _Echo_</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 04 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://echo.github.io/tags/%E4%B8%8D%E8%B4%9F%E8%B4%A3%E4%BB%BB%E8%A7%A3%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「Golang」遇到的有趣的Go赋值问题并附带以下不负责任的解析</title>
      <link>https://echo.github.io/posts/golang%E9%81%87%E5%88%B0%E7%9A%84%E6%9C%89%E8%B6%A3%E7%9A%84go%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98%E5%B9%B6%E9%99%84%E5%B8%A6%E4%BB%A5%E4%B8%8B%E4%B8%8D%E8%B4%9F%E8%B4%A3%E4%BB%BB%E7%9A%84%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://echo.github.io/posts/golang%E9%81%87%E5%88%B0%E7%9A%84%E6%9C%89%E8%B6%A3%E7%9A%84go%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98%E5%B9%B6%E9%99%84%E5%B8%A6%E4%BB%A5%E4%B8%8B%E4%B8%8D%E8%B4%9F%E8%B4%A3%E4%BB%BB%E7%9A%84%E8%A7%A3%E6%9E%90/</guid>
      <description>今天在做一道题的时候发现了这么一个有趣的题目：
func main() { index := 1 a := []string{&amp;#34;f&amp;#34;, &amp;#34;ff&amp;#34;, &amp;#34;fff&amp;#34;} index, a[index-1] = 88888, &amp;#34;ffff&amp;#34; fmt.Println(a) } 这个输出是什么呢？我第一眼看的时候感觉会输出panic，因为下标超界，但是运行之后发现没这么简单，运行结果如下 运行之后我惊了，不知道为什么会这样，然后我就输出了汇编看了一下（去掉了一些多余的汇编代码，我们只看赋值那行的汇编）：
 本篇文章基于go1.15+版本以及mac os 操作系统
 //把index的值复制到DX寄存器中 0x00f2 00242 MOVQ &amp;#34;&amp;#34;.index+48(SP), DX // DX寄存器的值-1 在此能看出是先对其进行了-1 0x00f7 00247 DECQ DX // 把DX寄存器里的值复制autotmp_4+56这个地址上 0x00fa 00250 MOVQ DX, &amp;#34;&amp;#34;..autotmp_4+56(SP) // 把88888赋值给index+48地址即赋值88888给index 0x00ff 00255 MOVQ $88888, &amp;#34;&amp;#34;.index+48(SP) // 把刚才-1了的值放在AX寄存器中 0x0108 00264 MOVQ &amp;#34;&amp;#34;..autotmp_4+56(SP), AX // 把a就是那个数组的偏移104个地址的值放入DX寄存器 0x010d 00269 MOVQ &amp;#34;&amp;#34;.a+104(SP), DX // 把a就是那个数组的偏移112个地址的值放入DX寄存器 0x0112 00274 MOVQ &amp;#34;&amp;#34;.</description>
    </item>
    
  </channel>
</rss>
